function rozwiazanie(;
    a::Float64 = 0.011,
    b::Float64 = 0.99,
    x::Vector{Float64} = [0.41678, 0.4333, 0.2582, 0.59423, 0.0118, 0.08784, 0.34738, 0.92996, 0.67181, 0.29085, 0.37547, 0.24036, 0.91905, 0.87123, 0.02132, 0.12191, 0.52814, 0.17406, 0.88114, 0.41538, 0.99302, 0.92836, 0.31787, 0.66499, 0.42575, 0.06694, 0.65286, 0.70708, 0.01386, 0.90948, 0.68987, 0.24726, 0.32617, 0.01065, 0.49744, 0.07697, 0.45386, 0.65298, 0.4846, 0.37409, 0.58882, 0.11005, 0.45074, 0.76907, 0.92698, 0.67926, 0.56957, 0.12247, 0.87929, 0.33827, 0.66785, 0.9058, 0.77672, 0.57745, 0.83376, 0.43016, 0.70504, 0.51339, 0.54812, 0.57336, 0.61517, 0.17502, 0.60166, 0.8522, 0.46882, 0.39919, 0.43736, 0.11386, 0.75817, 0.50908, 0.93229, 0.34909, 0.09266, 0.70006, 0.59668, 0.55153, 0.13446, 0.77767, 0.67137, 0.55418, 0.17817, 0.50559, 0.69905, 0.5504, 0.8182, 0.40808, 0.74931, 0.86486, 0.2586, 0.47829, 0.54189, 0.30771, 0.73266, 0.43367, 0.8379, 0.25525, 0.19611, 0.03113, 0.02444, 0.05764],
)
    n = 4 # ilo bitowy kwantyzator
    Q::Float64 = (b-a)/(2^n-1) 
    y = zeros(Float64, length(x))
    err = zeros(Float64, length(x))

    for i in eachindex(x)
        y[i] =a + Q * round((x[i] - a)/Q)
        if y[i] >= b
            y[i] = b
        elseif y[i] <= a
            y[i] = a
        end        
        err[i] = y[i] - x[i]
    end    
    Moc_strat::Float64 = 0
    Energia::Float64 = 0
    RMS::Float64 = 0
        for i in eachindex(err)
            Energia += err[i]^2
        end    

    Moc_strat = 1/length(err)*Energia    
    RMS = sqrt(Moc_strat)

    return RMS
   
end
#0.001715351016272825
rozwiazanie()
